-- HSQLDB 数据库程序数据库初始化脚本

-- 由 eclipselink 自动生成的建表脚本

-- 边栏菜单项表
CREATE TABLE IF NOT EXISTS PUBLIC.SIDEBAR_ITEMS (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, 
    DISPLAYTEXT VARCHAR(20), 
    ICONCLASSES VARCHAR(30), 
    NAME VARCHAR(20), 
    SINK INTEGER, 
    URL VARCHAR(200), 
    PARENTID INTEGER, 
    PRIMARY KEY (ID)
);

-- 插件表
CREATE TABLE IF NOT EXISTS PUBLIC.PLUGINS (
    NAME VARCHAR(45) NOT NULL,
    DESCRIPTION VARCHAR(800), 
    DEVELOPER VARCHAR(100), 
    ISACTIVE BOOLEAN, 
    DISPLAYNAME VARCHAR(120), 
    VERSION VARCHAR(100), 
    PACKAGEID VARCHAR(100) NOT NULL, 
    PRIMARY KEY (NAME),
);

-- 插件包表
CREATE TABLE IF NOT EXISTS PUBLIC.PLUGIN_PACKAGES (
    ID VARCHAR(100) NOT NULL, 
    FILENAME VARCHAR(100) NOT NULL, 
    CREATETIME TIMESTAMP NOT NULL,
    PRIMARY KEY (ID),
    UNIQUE (FILENAME)
);

-- 用户表
CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    CREATETIME TIMESTAMP NOT NULL, 
    EMAIL VARCHAR(100) NOT NULL, 
    MOBILE VARCHAR(20), 
    NAME VARCHAR(45) NOT NULL,
    ABOUTME VARCHAR(200),
    PASSWORD VARCHAR(100) NOT NULL, 
    ROLE TINYINT, 
    STATUS TINYINT, 
    UPDATETIME TIMESTAMP, 
    PRIMARY KEY (ID),
    UNIQUE (EMAIL)
);

-- 角色表
CREATE TABLE IF NOT EXISTS PUBLIC.ROLES (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    NAME VARCHAR(100) NOT NULL,
    PRIMARY KEY (ID),
    UNIQUE (NAME)
);

-- 权限表
CREATE TABLE IF NOT EXISTS PUBLIC.PRIVILEGES (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL, 
    NAME VARCHAR(100) NOT NULL, 
    PRIMARY KEY (ID)
);

-- 用户-角色表
CREATE TABLE IF NOT EXISTS PUBLIC.USERS_ROLES (
    USERID INTEGER NOT NULL, 
    ROLEID INTEGER NOT NULL, 
    PRIMARY KEY (USERID, ROLEID)
);

-- 角色-权限表
CREATE TABLE IF NOT EXISTS PUBLIC.ROLES_PRIVILEGES (
    PRIVILEGEID INTEGER NOT NULL, 
    ROLEID INTEGER NOT NULL, 
    PRIMARY KEY (PRIVILEGEID, ROLEID)
);

-- 菜单项-角色表
CREATE TABLE IF NOT EXISTS PUBLIC.SIDEBAR_ITEMS_ROLES (
    SIDEBARITEMID INTEGER NOT NULL, 
    ROLEID INTEGER NOT NULL, 
    PRIMARY KEY (SIDEBARITEMID, ROLEID)
);

--
-- 登录凭证
CREATE TABLE IF NOT EXISTS LOGIN_CREDENTIALS (
    SERIES VARCHAR(64) NOT NULL,
    USERNAME VARCHAR(64) NOT NULL, 
    TOKEN VARCHAR(64) NOT NULL, 
    LASTUSED TIMESTAMP NOT NULL,
    PRIMARY KEY(SERIES)
);

--
-- 插件请求
CREATE TABLE IF NOT EXISTS PLUGIN_REQUESTS (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    PLUGINNAME VARCHAR(45) NOT NULL,
    APPID INTEGER,
    CLIENTIP VARCHAR(20) NOT NULL, 
    REQUESTURL VARCHAR(400) NOT NULL,
    REQUESTMETHOD VARCHAR(10) NOT NULL,
    REQUESTDIGEST VARCHAR(400),
    REQUESTBYTES BIGINT NOT NULL,
    RESPONSEBYTES BIGINT NOT NULL,
    MILLISECONDS BIGINT NOT NULL,
    SUCCEEDED BOOLEAN NOT NULL,
    RESPONSECODE INTEGER NOT NULL,
    ERRORS CLOB,
    CREATETIME TIMESTAMP NOT NULL,
    PRIMARY KEY(ID)
);

--
-- 应用
CREATE TABLE IF NOT EXISTS APPS (
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    INTRODUCTION VARCHAR(200) NOT NULL,
    PLATFORM TINYINT NOT NULL,
    APPKEY VARCHAR(120) NOT NULL,
    SECRETKEY VARCHAR(120) NOT NULL,
    UPDATETIME TIMESTAMP,
    CREATETIME TIMESTAMP NOT NULL,
    PRIMARY KEY(ID),
    UNIQUE(NAME),
    UNIQUE(APPKEY)
);

--
-- Spring session 持久化
--
CREATE TABLE IF NOT EXISTS PUBLIC.SPRING_SESSION (
    SESSION_ID CHAR(36),
    CREATION_TIME BIGINT NOT NULL,
    LAST_ACCESS_TIME BIGINT NOT NULL,
    MAX_INACTIVE_INTERVAL INT NOT NULL,
    PRINCIPAL_NAME VARCHAR(100),
    CONSTRAINT SPRING_SESSION_PK PRIMARY KEY (SESSION_ID)
);

CREATE INDEX IF NOT EXISTS SPRING_SESSION_IX1 ON SPRING_SESSION (LAST_ACCESS_TIME);

CREATE TABLE IF NOT EXISTS PUBLIC.SPRING_SESSION_ATTRIBUTES (
    SESSION_ID CHAR(36),
    ATTRIBUTE_NAME VARCHAR(200),
    ATTRIBUTE_BYTES LONGVARBINARY,
    CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_ID, ATTRIBUTE_NAME),
    CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_ID) REFERENCES SPRING_SESSION(SESSION_ID) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS SPRING_SESSION_ATTRIBUTES_IX1 ON SPRING_SESSION_ATTRIBUTES (SESSION_ID);
